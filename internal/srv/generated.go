// Package srv provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package srv

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Emails     *[]string `json:"emails,omitempty"`
	FirstName  string    `json:"first_name"`
	Patronymic *string   `json:"patronymic,omitempty"`
	Surname    string    `json:"surname"`
}

// Person defines model for Person.
type Person struct {
	Age         *int      `json:"age,omitempty"`
	Emails      *[]string `json:"emails,omitempty"`
	FullName    string    `json:"full_name"`
	Gender      *string   `json:"gender,omitempty"`
	Id          int64     `json:"id"`
	Nationality *string   `json:"nationality,omitempty"`
}

// UpdatePersonRequest defines model for UpdatePersonRequest.
type UpdatePersonRequest struct {
	Emails   *[]string `json:"emails,omitempty"`
	FullName *string   `json:"full_name,omitempty"`
}

// AddFriendParams defines parameters for AddFriend.
type AddFriendParams struct {
	FriendId int64 `form:"friend_id" json:"friend_id"`
}

// UpdatePersonJSONRequestBody defines body for UpdatePerson for application/json ContentType.
type UpdatePersonJSONRequestBody = UpdatePersonRequest

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Search persons by surname
	// (GET /persons/surname/{surname})
	SearchPersonsBySurname(c *gin.Context, surname string)
	// Update a person
	// (PUT /persons/{id})
	UpdatePerson(c *gin.Context, id int64)
	// List friends of a person
	// (GET /persons/{id}/friends)
	ListFriends(c *gin.Context, id int64)
	// Add a friend
	// (POST /persons/{id}/friends)
	AddFriend(c *gin.Context, id int64, params AddFriendParams)
	// List all users
	// (GET /users)
	ListUsers(c *gin.Context)
	// Create a user
	// (POST /users)
	CreateUser(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// SearchPersonsBySurname operation middleware
func (siw *ServerInterfaceWrapper) SearchPersonsBySurname(c *gin.Context) {

	var err error

	// ------------- Path parameter "surname" -------------
	var surname string

	err = runtime.BindStyledParameterWithOptions("simple", "surname", c.Param("surname"), &surname, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter surname: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchPersonsBySurname(c, surname)
}

// UpdatePerson operation middleware
func (siw *ServerInterfaceWrapper) UpdatePerson(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdatePerson(c, id)
}

// ListFriends operation middleware
func (siw *ServerInterfaceWrapper) ListFriends(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListFriends(c, id)
}

// AddFriend operation middleware
func (siw *ServerInterfaceWrapper) AddFriend(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AddFriendParams

	// ------------- Required query parameter "friend_id" -------------

	if paramValue := c.Query("friend_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument friend_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "friend_id", c.Request.URL.Query(), &params.FriendId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter friend_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddFriend(c, id, params)
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUsers(c)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/persons/surname/:surname", wrapper.SearchPersonsBySurname)
	router.PUT(options.BaseURL+"/persons/:id", wrapper.UpdatePerson)
	router.GET(options.BaseURL+"/persons/:id/friends", wrapper.ListFriends)
	router.POST(options.BaseURL+"/persons/:id/friends", wrapper.AddFriend)
	router.GET(options.BaseURL+"/users", wrapper.ListUsers)
	router.POST(options.BaseURL+"/users", wrapper.CreateUser)
}
